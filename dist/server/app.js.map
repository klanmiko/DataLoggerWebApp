{"version":3,"sources":["app.js"],"names":["cluster","require","isMaster","startServer","app","angularFullstack","server","listen","port","ip","console","log","get","process","env","NODE_ENV","error","createServer","socketio","serveClient","path","Serial","Parser","dbStream","arduinoListener","parser","database","webSource","of","on","socket","unpipe","disconnect","data","write","CAN_Id","emit","default","pipe","fork","source","exports","module"],"mappings":"AAAA;;;;AAIA;;;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;;;AACA,IAAIA,UAAUC,QAAQ,SAAR,CAAd;AACA,IAAGD,QAAQE,QAAX,EAAqB;AAmDjB;AAnDiB,QAoDRC,WApDQ,GAoDjB,SAASA,WAAT,GAAuB;AACnBC,YAAIC,gBAAJ,GAAuBC,OAAOC,MAAP,CAAc,sBAAOC,IAArB,EAA2B,sBAAOC,EAAlC,EAAsC,YAAW;AACpEC,oBAAQC,GAAR,kCAA2C,sBAAOH,IAAlD,aAA8DJ,IAAIQ,GAAJ,CAAQ,KAAR,CAA9D;AACH,SAFsB,CAAvB;AAGH,KAxDgB;;AACjB,QAAGC,QAAQC,GAAR,CAAYC,QAAZ,IAAwB,MAA3B,EAAmC;AAC/BL,gBAAQC,GAAR,GAAc,cAAOA,GAArB;AACAD,gBAAQM,KAAR,GAAgB,cAAOA,KAAvB;AACH;AACD;;AAEA;AACA;AACA,QAAIZ,MAAM,wBAAV;AACA,QAAIE,SAAS,eAAKW,YAAL,CAAkBb,GAAlB,CAAb;AACA,QAAIc,WAAWjB,QAAQ,WAAR,EAAqBK,MAArB,EAA6B;AAC5Ca,qBAAa,sBAAOL,GAAP,KAAe,YADgB;AAE5CM,cAAM;AAFsC,KAA7B,CAAf;AAIA,QAAIC,SAASpB,QAAQ,oBAAR,CAAb;AACA,QAAIqB,SAASrB,QAAQ,2BAAR,CAAb;AACA,QAAIsB,WAAWtB,QAAQ,kBAAR,CAAf;AACA,QAAIuB,eAAJ;AACA,QAAIC,SAAS,IAAIH,MAAJ,EAAb;AACA,QAAII,WAAW,IAAIH,QAAJ,EAAf;AACA,QAAII,YAAYT,SAASU,EAAT,CAAY,MAAZ,CAAhB;AACAD,cAAUE,EAAV,CAAa,SAAb,EAAwB,UAASC,MAAT,EAAiB;AACrCpB,gBAAQC,GAAR,CAAY,oBAAZ;AACAa,wBAAgBO,MAAhB,CAAuBN,MAAvB;AACAD,wBAAgBQ,UAAhB;AACAF,eAAOD,EAAP,CAAU,MAAV,EAAkB,UAASI,IAAT,EAAe;AAC7BR,mBAAOS,KAAP,CAAaD,IAAb;AACH,SAFD;AAGH,KAPD;AAQAR,WAAOI,EAAP,CAAU,MAAV,EAAkB,UAASI,IAAT,EAAe;AAC7B,gBAAQA,KAAKE,MAAb;AACA,iBAAK,IAAL;AACA,iBAAK,GAAL;AACA,iBAAK,GAAL;AACIjB,yBAASkB,IAAT,CAAc,KAAd,EAAqBH,IAArB;AACA;AACJ,iBAAK,IAAL;AACIf,yBAASkB,IAAT,CAAc,MAAd,EAAsBH,IAAtB;AACA;AACJ,iBAAK,GAAL;AACA,iBAAK,GAAL;AACIf,yBAASkB,IAAT,CAAc,KAAd,EAAqBH,IAArB;AACA;AACJ;AACIf,yBAASkB,IAAT,CAAc,MAAd,EAAsBH,IAAtB;AAdJ;AAgBH,KAjBD;AAkBAhC,YAAQ,mBAAR,EAA6BoC,OAA7B,CAAqCnB,QAArC;AACAjB,YAAQ,kBAAR,EAA4BoC,OAA5B,CAAoCjC,GAApC;AACAH,YAAQ,UAAR,EAAoBoC,OAApB,CAA4BjC,GAA5B,EAAiCqB,MAAjC,EAAyCC,QAAzC;;AAQA,gCAAavB,WAAb;AACA,gCAAa,YAAW;AACpBqB,0BAAkB,IAAIH,MAAJ,EAAlB;AACAG,wBAAgBc,IAAhB,CAAqBb,MAArB;AACH,KAHD;AAIAzB,YAAQuC,IAAR;AACH;AACD,IAAIC,MAAJ;AACA,IAAG,CAACxC,QAAQE,QAAZ,EAAqB;AACjBsC,aAASvC,QAAQ,uCAAR,CAAT;AACH;AACD;AACAwC,UAAUC,OAAOD,OAAP,GAAiBrC,GAA3B","file":"app.js","sourcesContent":["/**\r\n * Main application file\r\n */\r\n\r\n'use strict';\r\n\r\nimport express from 'express';\r\nimport config from './config/environment';\r\nimport http from 'http';\r\nimport logger from './console/log';\r\nvar cluster = require('cluster');\r\nif(cluster.isMaster) {\r\n    if(process.env.NODE_ENV != \"test\") {\r\n        console.log = logger.log;\r\n        console.error = logger.error;\r\n    }\r\n    // Connect to MongoDB\r\n\r\n    // Populate databases with sample data\r\n    // Setup server\r\n    var app = express();\r\n    var server = http.createServer(app);\r\n    var socketio = require('socket.io')(server, {\r\n    serveClient: config.env !== 'production',\r\n    path: '/socket.io-client'\r\n    });\r\n    var Serial = require('./serial/serial.js');\r\n    var Parser = require('./serial/dynamicParser.js');\r\n    var dbStream = require('./db/dbStream.js');\r\n    var arduinoListener;\r\n    var parser = new Parser();\r\n    var database = new dbStream();\r\n    var webSource = socketio.of('/src');\r\n    webSource.on('connect', function(socket) {\r\n        console.log(\"Source connected: \");\r\n        arduinoListener.unpipe(parser);\r\n        arduinoListener.disconnect();\r\n        socket.on('data', function(data) {\r\n            parser.write(data);\r\n        });\r\n    });\r\n    parser.on('data', function(data) {\r\n        switch (data.CAN_Id) {\r\n        case 1574:\r\n        case 512:\r\n        case 513:\r\n            socketio.emit(\"car\", data);\r\n            break;\r\n        case 1160:\r\n            socketio.emit(\"temp\", data);\r\n            break;\r\n        case 392:\r\n        case 904:\r\n            socketio.emit(\"bms\", data);\r\n            break;\r\n        default:\r\n            socketio.emit(\"data\", data);\r\n        }\r\n    });\r\n    require('./config/socketio').default(socketio);\r\n    require('./config/express').default(app);\r\n    require('./routes').default(app, parser, database);\r\n    // Start server\r\n    function startServer() {\r\n        app.angularFullstack = server.listen(config.port, config.ip, function() {\r\n            console.log(`Express server listening on ${config.port}, in ${app.get('env')} mode`);\r\n        });\r\n    }\r\n\r\n    setImmediate(startServer);\r\n    setImmediate(function() {\r\n        arduinoListener = new Serial();\r\n        arduinoListener.pipe(parser);\r\n    });\r\n    cluster.fork();\r\n}\r\nvar source;\r\nif(!cluster.isMaster){\r\n    source = require('./serial/serial_test/socket_source.js');\r\n}\r\n// Expose app\r\nexports = module.exports = app;\r\n"]}