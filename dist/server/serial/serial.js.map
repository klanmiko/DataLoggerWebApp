{"version":3,"sources":["serial/serial.js"],"names":["SerialPort","require","Readable","logger","serialStream","options","objectMode","connect","arduinoPort","resume","console","log","self","findArduino","err","port","error","setPort","reconnect","setInterval","removeListener","_closePort","close","clearInterval","undefined","callback","list","ports","forEach","manufacturer","includes","found","path","comName","pnpId","parser","parsers","byteDelimiter","on","_data","bind","e","data","length","array","Buffer","from","slice","push","readUInt16BE","readUInt32BE","i","readUInt8","module","exports"],"mappings":"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","file":"serial.js","sourcesContent":["const SerialPort = require(\"serialport\");\r\nconst Readable = require('stream').Readable;\r\nconst logger = require('../console/log.js');\r\n\r\nclass serialStream extends Readable\r\n{\r\n    constructor(options)\r\n    {\r\n        options = options || {};\r\n        options.objectMode = true;\r\n        super(options);\r\n        this.connect();\r\n    }\r\n    _read()\r\n    {\r\n        if(this.arduinoPort && this.arduinoPort.resume)this.arduinoPort.resume();\r\n    }\r\n    connect(){\r\n        console.log(\"connect called\");\r\n        var self = this;\r\n        this.findArduino(function(err,port){\r\n            if(err) console.error(err);\r\n            if(port)self.setPort(port);\r\n        });\r\n        if(!self.reconnect){\r\n            self.reconnect = setInterval(function(){ \r\n                if(!self.arduinoPort){ \r\n                    //console.log(\"reconnecting to Arduino Serial\"); \r\n                    self.findArduino(function(err,port){\r\n                        if(err) console.error(err); \r\n                        if(port)self.setPort(port); \r\n                    }); \r\n                }  \r\n            },5000);\r\n        } \r\n    } \r\n    disconnect(){ \r\n        if(this.arduinoPort){\r\n            this.arduinoPort.removeListener(\"close\",this._closePort); \r\n            this.arduinoPort.close(); \r\n        } \r\n        clearInterval(this.reconnect); \r\n        this.reconnect = undefined;\r\n    }\r\n    findArduino(callback){\r\n        SerialPort.list(function (err, ports) {\r\n            if(err){\r\n                console.error(err);\r\n                console.log(\"error in listing ports\");\r\n                callback(err,null);\r\n            }\r\n            ports.forEach(function (port) {\r\n                if (port.manufacturer&&port.manufacturer.includes(\"Arduino\"))\r\n                {\r\n                    callback(null,port);\r\n                }\r\n            });\r\n        });\r\n    }\r\n    setPort(found){\r\n        var self = this;\r\n        if(!(this.arduinoPort&&this.arduinoPort.path==found.comName)){\r\n            try{\r\n                console.log(found.comName);\r\n                console.log(found.pnpId);\r\n                console.log(found.manufacturer);\r\n                var port = new SerialPort(found.comName, {\r\n                    parser: SerialPort.parsers.byteDelimiter([0xFF, 10])\r\n                });\r\n                port.on('data',this._data.bind(self));\r\n                port.on(\"close\",this._closePort.bind(self));\r\n                this.arduinoPort = port;\r\n            }\r\n            catch(e){\r\n                console.log(\"error attaching to port\");\r\n                console.error(e);\r\n            }\r\n        }\r\n    }\r\n    _closePort(){\r\n        console.log(\"closing\");\r\n        this.arduinoPort = undefined;\r\n    }\r\n    _data(data){\r\n        if(data.length==16){\r\n            setImmediate(function(){\r\n                var array = [];\r\n                data = Buffer.from(data, 'utf-8').slice(0, data.length - 2);\r\n                array.push(data.readUInt16BE(0));\r\n                array.push(data.readUInt32BE(2));\r\n                for(var i = 6; i < data.length; i++) {\r\n                    array.push(data.readUInt8(i));\r\n                }\r\n                this.push(array);\r\n            }.bind(this));\r\n        }\r\n    }\r\n}\r\nmodule.exports = serialStream;\r\n"]}