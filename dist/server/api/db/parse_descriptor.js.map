{"version":3,"sources":["api/db/parse_descriptor.js"],"names":["DataStore","require","path","local","resolve","__dirname","fs","assert","database","filename","autoload","ensureIndex","fieldName","unique","err","console","error","load","readFile","data","defaults","JSON","parse","log","forEach","key","count","CAN_Id","countr","insert","setTimeout","module","exports","onload","model","reset","cb","remove","multi"],"mappings":";;;;;;;;AAAA,IAAIA,YAAYC,QAAQ,MAAR,CAAhB;AACA,IAAIC,OAAOD,QAAQ,MAAR,CAAX;AACA,IAAIE,QAAQD,KAAKE,OAAL,CAAaC,SAAb,CAAZ;AACA,IAAIC,KAAKL,QAAQ,IAAR,CAAT;AACA,IAAIM,SAASN,QAAQ,QAAR,CAAb;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,IAAIO,WAAW,IAAIR,SAAJ,CAAc,EAACS,UAAUP,KAAKE,OAAL,CAAaC,SAAb,EAAwB,oBAAxB,CAAX,EAA0DK,UAAU,IAApE,EAAd,CAAf;AACAF,SAASG,WAAT,CAAqB,EAACC,WAAW,QAAZ,EAAsBC,QAAQ,IAA9B,EAArB,EAA0D,UAACC,GAAD,EAAS;AAAC,QAAGA,GAAH,EAAQC,QAAQC,KAAR,CAAcF,GAAd;AAAmB,CAA/F;;AAEC,UAASG,IAAT,GAAgB;AACbX,OAAGY,QAAH,CAAef,KAAf,qBAAsC,UAASW,GAAT,EAAcK,IAAd,EAAoB;AACtD,YAAIC,WAAWC,KAAKC,KAAL,CAAWH,IAAX,CAAf;AACAJ,gBAAQQ,GAAR,CAAYH,QAAZ;AACA,4BAAYA,QAAZ,EAAsBI,OAAtB,CAA8B,UAASC,GAAT,EAAc;AACxCjB,qBAASkB,KAAT,CAAe,EAAC,UAAUN,SAASK,GAAT,EAAcE,MAAzB,EAAf,EAAiD,UAASb,GAAT,EAAcc,MAAd,EAAqB;AAClE,oBAAGA,UAAU,CAAb,EAAgB;AACZ,wBAAGR,SAASK,GAAT,CAAH,EAAiB;AACbjB,iCAASqB,MAAT,CAAgBT,SAASK,GAAT,CAAhB,EAA+B,UAASX,GAAT,EAAc;AACzC,gCAAGA,GAAH,EAAQC,QAAQC,KAAR,CAAcF,GAAd;AACX,yBAFD;AAGH;AACJ;AACJ,aARD;AASH,SAVD;AAWAgB,mBAAWC,OAAOC,OAAP,CAAeC,MAA1B,EAAkC,IAAlC;AACH,KAfD;AAgBH,CAjBA,GAAD;AAkBAF,OAAOC,OAAP,CAAeE,KAAf,GAAuB1B,QAAvB;AACAuB,OAAOC,OAAP,CAAeC,MAAf,GAAwB,YAAU,CAAE,CAApC;AACAF,OAAOC,OAAP,CAAeG,KAAf,GAAuB,UAASC,EAAT,EAAa;AAChC9B,OAAGY,QAAH,CAAef,KAAf,qBAAsC,UAASW,GAAT,EAAcK,IAAd,EAAoB;AACtD,YAAGL,GAAH,EAAQ;AACJC,oBAAQC,KAAR,CAAc,oBAAd;AACAoB,eAAGtB,GAAH;AACA;AACH;AACD,YAAIM,WAAWC,KAAKC,KAAL,CAAWH,IAAX,CAAf;AACA,YAAIH,QAAQ,IAAZ;AACAR,iBAAS6B,MAAT,CAAgB,EAAhB,EAAoB,EAACC,OAAO,IAAR,EAApB,EAAmC,UAASxB,GAAT,EAAc;AAC7C,gBAAGA,GAAH,EAAQ;AACJsB,mBAAGtB,GAAH;AACA;AACH;AACD,gCAAYM,QAAZ,EAAsBI,OAAtB,CAA8B,UAASC,GAAT,EAAc;AACxCjB,yBAASqB,MAAT,CAAgBT,SAASK,GAAT,CAAhB,EAA+B,UAASX,GAAT,EAAc;AACzC,wBAAGA,GAAH,EAAQ;AACJC,gCAAQC,KAAR,CAAc,kBAAd;AACAA,gCAAQF,GAAR;AACA;AACH;AACJ,iBAND;AAOH,aARD;AASAsB,eAAGpB,KAAH,EAd6C,CAclC;AACd,SAfD;AAgBH,KAxBD;AAyBH,CA1BD","file":"parse_descriptor.js","sourcesContent":["var DataStore = require('nedb');\r\nvar path = require('path');\r\nvar local = path.resolve(__dirname);\r\nvar fs = require('fs');\r\nvar assert = require('assert');\r\n\r\n/*var canDescription  = new Mongoose.Schema({\r\n    CAN_Id: {\r\n        type:Number,\r\n        unique:true,\r\n        index:true\r\n    },\r\n    PDO_Description:String,\r\n    map:[{\r\n        _id:false,\r\n        key:String,\r\n        description:String,\r\n        length:Number, //if datatype is array, refers to number of array elements\r\n        offset:Number,\r\n        dataType:{\r\n            type:String,\r\n            match:/flag|state|decimal|string|array/\r\n        },\r\n        array:{\r\n            subLength:Number,\r\n            subDataType:{\r\n                type:String,\r\n                match:/flag|state|decimal|string/\r\n            }\r\n        }\r\n        }]\r\n});*/\r\nvar database = new DataStore({filename: path.resolve(__dirname, \"./data/descriptors\"), autoload: true});\r\ndatabase.ensureIndex({fieldName: \"CAN_Id\", unique: true}, (err) => {if(err) console.error(err)});\r\n\r\n(function load() {\r\n    fs.readFile(`${local}/defaults.conf`, function(err, data) {\r\n        var defaults = JSON.parse(data);\r\n        console.log(defaults);\r\n        Object.keys(defaults).forEach(function(key) {\r\n            database.count({\"CAN_Id\": defaults[key].CAN_Id}, function(err, countr){\r\n                if(countr == 0) {\r\n                    if(defaults[key]){\r\n                        database.insert(defaults[key], function(err) {\r\n                            if(err) console.error(err);\r\n                        });\r\n                    }\r\n                }\r\n            })\r\n        });\r\n        setTimeout(module.exports.onload, 1000);\r\n    });\r\n}());\r\nmodule.exports.model = database;\r\nmodule.exports.onload = function(){};\r\nmodule.exports.reset = function(cb) {\r\n    fs.readFile(`${local}/defaults.conf`, function(err, data) {\r\n        if(err) {\r\n            console.error(\"error reading file\");\r\n            cb(err);\r\n            return;\r\n        }\r\n        var defaults = JSON.parse(data);\r\n        let error = null;\r\n        database.remove({}, {multi: true}, function(err) {\r\n            if(err) {\r\n                cb(err);\r\n                return;\r\n            }\r\n            Object.keys(defaults).forEach(function(key) {\r\n                database.insert(defaults[key], function(err) {\r\n                    if(err) {\r\n                        console.error(\"error saving doc\");\r\n                        error = err;\r\n                        return;\r\n                    }\r\n                });\r\n            });\r\n            cb(error); // done\r\n        });\r\n    });\r\n};\r\n"]}