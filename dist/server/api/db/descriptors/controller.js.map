{"version":3,"sources":["api/db/descriptors/controller.js"],"names":["listDescriptor","getDescriptor","updateDescriptor","deleteMap","reset","ParseDescriptor","require","model","Validator","req","res","find","_id","err","result","console","error","sendStatus","send","findOne","CAN_Id","Number","params","descriptor","body","request","set","Object","unset","PDO_Description","count","exec","document","map","length","Error","i","forEach","key","dataType","log","add","slice","update","$set","$unset","upsert","multi","doc","status","$addToSet","$each","returnUpdatedDocs","num","insert","e","query","offset","description","element","parseInt","$exists","$elemMatch","$pull","Array","remove"],"mappings":"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","file":"controller.js","sourcesContent":["const ParseDescriptor = require('../parse_descriptor.js');\r\nvar model = ParseDescriptor.model;\r\nvar Validator = require('../validator.js');\r\n\r\nexport function listDescriptor(req, res) {\r\n    model.find({}, {_id: 0}, function(err, result) {\r\n        if(err) {\r\n            console.error(err);\r\n            res.sendStatus(401);\r\n            return;\r\n        }\r\n        res.send(result);\r\n    });\r\n}\r\nexport function getDescriptor(req, res) {\r\n    model.findOne({CAN_Id: Number(req.params.descriptor)}, {_id: 0, \"map.key\": 0}, function(err, result) {\r\n        if(err) {\r\n            console.error(err);\r\n            res.sendStatus(401);\r\n            return;\r\n        }\r\n        res.send(result);\r\n    });\r\n}\r\nexport function updateDescriptor(req, res) {\r\n    if(!req.body) {\r\n        res.sendStatus(401);\r\n        return;\r\n    }\r\n    var request = req.body;\r\n    try {\r\n        Validator(request);\r\n        var set = new Object();\r\n        var unset = new Object();\r\n        set.CAN_Id = request.CAN_Id;\r\n        set.PDO_Description = request.PDO_Description;\r\n        var count;\r\n        model.findOne({CAN_Id: Number(req.params.descriptor)})\r\n        .exec(function(err, document) {\r\n            if(document) {\r\n                count = document.map.length;\r\n                if(document.map.length > request.map.length) throw new Error(\"too few fields\");\r\n                for(var i = 0; i < count; i++) {\r\n                    Object.keys(request.map[i]).forEach(function(key) {\r\n                        if(key != 'key') set[`map.${i}.${key}`] = request.map[i][key];\r\n                    });\r\n                    if(request.map[i].dataType != \"array\") unset[`map.${i}.array`] = \"\";\r\n                }\r\n                console.log(\"set\");\r\n                console.log(set);\r\n                var add = request.map.slice(count, request.map.length);\r\n                console.log(\"add\");\r\n                console.log(add);\r\n                model.update({CAN_Id: Number(req.params.descriptor)}, {$set: set, $unset: unset}, {upsert: false, multi: false}, function(err, doc) {\r\n                    if(err) {\r\n                        console.error(err);\r\n                        res.status(501).send(\"invalid update procedure\");\r\n                        return;\r\n                    }\r\n                    model.update({CAN_Id: Number(req.params.descriptor)}, {$addToSet: {map: {$each: add}}}, {upsert: true, multi: false, returnUpdatedDocs: true}, function(err, num, doc) {\r\n                        if(err) {\r\n                            console.error(err);\r\n                            res.status(501).send(\"invalid update procedure\");\r\n                            return;\r\n                        }\r\n                        console.log(doc)\r\n                        res.status(200).send(doc);\r\n                    });\r\n                });\r\n            }\r\n            else{\r\n                model.insert(request, function(err) {\r\n                    if(err) {\r\n                        console.log(\"error creating documents\");\r\n                        console.error(err);\r\n                        return;\r\n                    }\r\n                    res.sendStatus(200);\r\n                });\r\n            }\r\n        });\r\n    }\r\n    catch(e){\r\n        console.log(e);\r\n        res.status(402).send(\"invalid formatting\");\r\n    }\r\n}\r\nexport function deleteMap(req,res){\r\n    if(req.query.offset && req.query.length && req.query.description && req.query.dataType) {\r\n        console.log(req.query);\r\n        var element = {offset: parseInt(req.query.offset),\r\n            description:req.query.description,\r\n            length: parseInt(req.query.length),\r\n            dataType: req.query.dataType,\r\n            key: {$exists: false}\r\n        };\r\n        console.log(element);\r\n        model.find({CAN_Id: Number(req.params.descriptor), map: {$elemMatch: element}}, {map: 1, _id: 0})\r\n        .exec(function(err, doc) {\r\n            //console.log(\"we're here\");\r\n            if(err) console.error(err);\r\n            if(doc && doc.length > 0) {\r\n                delete element.key;\r\n                model.update({CAN_Id: Number(req.params.descriptor)}, {$pull: {map: element}}, {multi: false,upsert: false,returnUpdatedDocs:true}, function(err, num, doc) {\r\n                    if(err){\r\n                        console.error(err);\r\n                        res.status(501).send(\"invalid update procedure\");\r\n                        return;\r\n                    }\r\n                    res.status(200).send(doc);\r\n                });\r\n            }\r\n            else {\r\n                res.status(401).send(\"can't delete core mapping\");\r\n            }\r\n        });\r\n        /**/\r\n    }\r\n    else {\r\n        model.find({CAN_Id: Number(req.params.descriptor), \"map.key\": {$exists: true}}).exec(function(err, doc) {\r\n            if(err){\r\n                console.error(err);\r\n                return res.status(501).send(\"invalid delete procedure\");\r\n            }\r\n            console.log(doc);\r\n            if(!doc || (doc instanceof Array && doc.length == 0)) {\r\n                model.remove({CAN_Id: Number(req.params.descriptor)}, function(err) {\r\n                    if(err) {\r\n                        console.log(err);\r\n                        res.status(501).send(\"invalid delete procedure\");\r\n                        return;\r\n                    }\r\n                    res.sendStatus(200);\r\n                });\r\n            }\r\n            else {\r\n                res.status(401).send(\"can't delete core mapping\");\r\n            }\r\n        });\r\n    }\r\n}\r\nexport function reset(req, res) {\r\n    ParseDescriptor.reset(err => {\r\n        if(err) {\r\n            console.error(err);\r\n            res.sendStatus(401);\r\n            return;\r\n        }\r\n        res.sendStatus(200);\r\n    });\r\n}\r\n"]}