{"version":3,"sources":["api/upload/controller.js"],"names":["fs","require","csv","Parser","module","exports","index","req","res","file","parser","array","write","first","on","data","ret","JSON","parse","raw","stream","createReadStream","path","headerSet","workerNum","fromStream","csvRow","length","slice","status","parseInt","radix","i","val","error","console","log","end"],"mappings":";;;;;;;;AAAA,IAAIA,KAAKC,QAAQ,IAAR,CAAT;AACA,IAAIC,MAAMD,QAAQ,WAAR,CAAV;AACA,IAAIE,SAASF,QAAQ,+BAAR,CAAb;AACAG,OAAOC,OAAP,GAAiB,SAASC,KAAT,CAAeC,GAAf,EAAmBC,GAAnB,EAAuB;AACpC,QAAIC,OAAOF,IAAIE,IAAf;AACA,QAAIC,SAAS,IAAIP,MAAJ,EAAb;AACA,QAAIQ,QAAQ,CAAZ;AACAH,QAAII,KAAJ,CAAU,GAAV;AACA,QAAIC,QAAQ,IAAZ;AACAH,WAAOI,EAAP,CAAU,MAAV,EAAkB,UAASC,IAAT,EAAe;AAC7B,YAAIC,MAAMC,KAAKC,KAAL,CAAWH,IAAX,CAAV;AACA,eAAOC,IAAIG,GAAX;AACAR;AACA,YAAG,CAACE,KAAJ,EAAW;AACPL,gBAAII,KAAJ,CAAU,GAAV;AACH;AACDJ,YAAII,KAAJ,CAAU,yBAAeI,GAAf,CAAV;AACAH,gBAAQ,KAAR;AACH,KATD;AAUA,QAAIO,SAASpB,GAAGqB,gBAAH,CAAoBZ,KAAKa,IAAzB,CAAb;AACA,QAAIC,YAAY,KAAhB;AACArB,QAAI,EAACsB,WAAU,CAAX,EAAJ,EACCC,UADD,CACYL,MADZ,EAECN,EAFD,CAEI,KAFJ,EAEW,UAACY,MAAD,EAAU;AACjB,YAAGA,OAAOC,MAAP,GAAgB,EAAnB,EACI;AACJD,iBAASA,OAAOE,KAAP,CAAa,CAAb,EAAe,EAAf,CAAT;AACA,YAAG,CAACL,SAAJ,EAAc;AACVf,gBAAIqB,MAAJ,CAAW,GAAX;AACAN,wBAAY,IAAZ;AACH;AACDG,eAAO,CAAP,IAAYI,SAASJ,OAAO,CAAP,CAAT,EAAoB,EAApB,CAAZ;AACA,YAAIK,QAAQ,EAAZ;AACAL,eAAO,CAAP,IAAYI,SAASJ,OAAO,CAAP,CAAT,CAAZ;AACA,aAAI,IAAIM,IAAI,CAAZ,EAAeA,IAAIN,OAAOC,MAA1B,EAAkCK,GAAlC,EAAuC;AACnC,gBAAIC,MAAMH,SAASJ,OAAOM,CAAP,CAAT,EAAoBD,KAApB,CAAV;AACAL,mBAAOM,CAAP,IAAYC,GAAZ;AACH;AACDvB,eAAOE,KAAP,CAAa,yBAAec,MAAf,CAAb;AACA;AACH,KAnBD,EAoBCZ,EApBD,CAoBI,MApBJ,EAoBW,UAACoB,KAAD,EAAS;AAChB,YAAGA,KAAH,EAAUC,QAAQD,KAAR,CAAcA,KAAd;AACVC,gBAAQC,GAAR,CAAY,kBAAZ;AACAD,gBAAQC,GAAR,gBAAyBzB,KAAzB;AACAH,YAAII,KAAJ,CAAU,GAAV;AACAJ,YAAI6B,GAAJ;AACH,KA1BD;AA2BH,CA7CD","file":"controller.js","sourcesContent":["var fs = require('fs');\r\nvar csv = require('csvtojson');\r\nvar Parser = require('../../serial/dynamicParser.js');\r\nmodule.exports = function index(req,res){\r\n    let file = req.file;\r\n    let parser = new Parser();\r\n    var array = 0;\r\n    res.write('[');\r\n    var first = true;\r\n    parser.on('data', function(data) {\r\n        let ret = JSON.parse(data);\r\n        delete ret.raw;\r\n        array++;\r\n        if(!first) {\r\n            res.write(',');\r\n        }\r\n        res.write(JSON.stringify(ret));\r\n        first = false;\r\n    });\r\n    let stream = fs.createReadStream(file.path);\r\n    let headerSet = false;\r\n    csv({workerNum:4})\r\n    .fromStream(stream)\r\n    .on('csv', (csvRow)=>{\r\n        if(csvRow.length < 10)\r\n            return;\r\n        csvRow = csvRow.slice(0,10);\r\n        if(!headerSet){\r\n            res.status(200);\r\n            headerSet = true;\r\n        }\r\n        csvRow[0] = parseInt(csvRow[0], 16);\r\n        let radix = 16;\r\n        csvRow[1] = parseInt(csvRow[1]);\r\n        for(let i = 2; i < csvRow.length; i++) {\r\n            let val = parseInt(csvRow[i], radix);\r\n            csvRow[i] = val;\r\n        }\r\n        parser.write(JSON.stringify(csvRow));\r\n        // csvRow is an array\r\n    })\r\n    .on('done',(error)=>{\r\n        if(error) console.error(error);\r\n        console.log(\"done reading csv\");\r\n        console.log(`Processed ${array} from csv`);\r\n        res.write(']');\r\n        res.end();\r\n    });\r\n}"]}